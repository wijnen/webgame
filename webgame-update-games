#!/usr/bin/python3

'''Update all games.

Actions:
- Link html/ directory to central location (same subpath as games/ directory for each game).
- Update translations.

Paths:
<datapath>/
	html -> accessible from web server
		games -> link to ../games/html
	games -> possibly link
		html -> automatically filled
		<gamename>/ -> game directory
			html -> linked to ../html/<gamename>
			<gamename>.py
'''

import sys
import os
import subprocess
import fhs
from network import log
config = fhs.init(help = 'Update all webgame games', version = '0.1', contact = 'Bas Wijnen <wijnen@debian.org>', packagename = 'webgame', game = True)

def run(cmd, input = None):
	if input is None:
		return subprocess.run(cmd, shell = True, close_fds = True, stdout = subprocess.PIPE).stdout
	else:
		return subprocess.run(cmd, shell = True, close_fds = True, input = input, stdout = subprocess.PIPE).stdout

# Find all games.
games = fhs.read_data('games', dir = True, multiple = True)
log('Found possible games locations: ' + '; '.join(games))

for gamesdir in games:
	# Create html directory, if it does not exist yet.
	htmldir = os.path.join(gamesdir, 'html')
	if not os.path.isdir(htmldir):
		try:
			os.mkdir(htmldir)
		except PermissionError:
			log('insufficient permissions to update ' + gamesdir + '; skipping')
			continue

	# Create link to htmldir from ../html/games
	targetdir = os.path.join(os.path.dirname(gamesdir), 'html')
	if not os.path.exists(targetdir):
		try:
			os.mkdir(targetdir)
		except PermissionError:
			log('insufficient permissions to create html link for ' + gamesdir + '; skipping')
			continue
	target = os.path.join(targetdir, 'games')
	if not os.path.exists(target):
		try:
			os.symlink(os.path.join(os.pardir, 'games', 'html'), target)
		except PermissionError:
			log('insufficient permissions to update html link for ' + gamesdir + '; skipping')
			continue

	# Remove all links in htmldir; any valid links will be recreated.
	# Doing it this way makes sure that a game can be removed by removing the game directory, and the link will be cleaned automatically.
	for link in os.listdir(htmldir):
		if link.startswith('.'):
			# Never touch hidden files.
			continue
		target = os.path.join(htmldir, link)
		if os.path.islink(target):
			try:
				os.unlink(target)
			except PermissionError:
				log('insufficient permissions to remove ' + target + '; ignored')

	# Handle all game candidates in this directory.
	for game in os.listdir(gamesdir):
		# Ignore hidden files and the special 'html' directory.
		if game.startswith('.') or game == 'html':
			#log('skipping ' + game + ': hidden or special file')
			continue

		if not os.path.isdir(os.path.join(gamesdir, game)):
			# Not a directory; ignore without message.
			#log('skipping ' + game + ': not a directory')
			continue

		if not os.path.isfile(os.path.join(gamesdir, game, game + os.extsep + 'py')):
			log('skipping ' + game + ': no game file (needed: ' + game + os.extsep + 'py)')
			continue

		# Link html/ directory.
		if not os.path.isdir(os.path.join(gamesdir, game, 'html')):
			log('skipping ' + game + ': no html directory')
			continue

		target = os.path.join(gamesdir, 'html', game)
		if not os.path.exists(target):
			log('linking html directory for ' + game + ' in ' + gamesdir)
			try:
				os.symlink(os.path.join(os.pardir, game, 'html'), target)
			except PermissionError:
				log('skipping ' + game + ': insufficient permissions')
		else:
			log('skipping ' + game + ': already exists and is not a symlink')

		# Update translations.

		# All translations are done in the browser.
		# Sources of translated strings in game files:
		# - Python files (main game file and local modules)
		# - javascript files
		# Sources of translated strings in system files:
		# - webgame
		# - html/webgame.js
		# game and system files go into separate po (and pot) files.
		# The system strings have their own mo file.
		# Every language has a single mo file per game.
		# This code generates the mo files for the game strings.

		# File locations:
		# webgame po: system strings, in webgame data path.
		# game po: game strings, in gamedir/po/lang.po
		# game pot: generated on the fly; not stored.
		# game mo: generated on the fly; not stored.
		# game js: all resulting strings
		# TODO.


year = time.strftime('%Y').encode('utf-8')
date = time.strftime('%F %H:%M%z').encode('utf-8')

def xgettext(programming_language, sources, input = None):
	'''xgettext extracts strings from a source file and generates a pot file.'''
	return run ("xgettext --add-comments --from-code UTF-8 --package-name '" +
			name.replace("'", r"\'") +
			"' --msgid-bugs-address " + config['bugs'] +
			' -L ' + programming_language +
			' ' + ('- ' if input is not None else '') + ' '.join(sources) +
			' -o -',
			input) \
		.replace(b'\n"Content-Type: text/plain; charset=CHARSET\\n"\n', b'\n"Content-Type: text/plain; charset=UTF-8\\n"\n') \
		.replace(b'\n# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.\n', b'\n# ' + config['copyright'].encode('utf-8') + b', ' + year + b'.\n') \
		.replace(b"\n# Copyright (C) YEAR THE PACKAGE'S COPYRIGHT HOLDER\n", b'\n# Copyright (C) ' + year + b' ' + config['copyright'].encode('utf-8') + b'\n') \
		.replace(b'\n"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n"\n', b'\n"Last-Translator: ' + config['copyright'].encode('utf-8') + b'\\n"\n') \
		.replace(b'\n"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n"\n', b'\n"PO-Revision-Date: ' + date + b'\\n"\n')

# Create pot into a variable.
name = config['name'] or os.path.basename(os.path.abspath(os.curdir)).capitalize()
pyfiles = [x for x in os.listdir(os.curdir) if x.endswith('.py') or x == 'ai']
jsfiles = [os.path.join('html', x) for x in os.listdir('html') if x.endswith('.js')]
pypot = xgettext('Python', pyfiles)
jspot = xgettext("JavaScript", jsfiles, ('// The language name of the translation, for the dropdown selection\nconsole.info(_("' + name.replace('"', '\\"') + '"), _("Language Name"));').encode('utf-8'))
with fhs.write_temp(text = False) as tmp:
	tmp.write(pypot)
	tmp.flush()
	pot = run('msgcat - %s -o-' % tmp.filename, jspot)

# Run msgmerge for each translation. This updates the existing translation with the new pot.
for f in os.listdir('po'):
	if not f.endswith('.po'):
		continue
	run('msgmerge --quiet --lang %s -U %s -' % (os.path.splitext(f)[0], os.path.join('po', f)), pot)
