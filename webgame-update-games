#!/usr/bin/python3

'''Update all games.

Actions:
- Link html/ directory to central location (same subpath as games/ directory for each game).
- Update translations.

Paths:
<datapath>/
	html -> accessible from web server
		games -> link to ../games/html
	games -> possibly link
		html -> automatically filled
		<gamename>/ -> game directory
			html -> linked to ../html/<gamename>
			<gamename>.py
'''

import sys
import os
import time
import subprocess
import re
import fhs
from network import log
config = fhs.init(help = 'Update all webgame games', version = '0.1', contact = 'Bas Wijnen <wijnen@debian.org>', packagename = 'webgame', game = True)

def run(cmd, input = None):
	if input is None:
		return subprocess.run(cmd, shell = True, close_fds = True, stdout = subprocess.PIPE).stdout
	else:
		return subprocess.run(cmd, shell = True, close_fds = True, input = input, stdout = subprocess.PIPE).stdout

date = time.strftime('%F %H:%M%z').encode('utf-8')

def xgettext(programming_language, sources, input = None, cd = False):
	'''xgettext extracts strings from a source file and generates a pot file.'''
	if cd:
		assert len(sources) == 1
		prefix = 'cd %s ; ' % os.path.dirname(sources[0])
		filenames = os.path.basename(sources[0])
	else:
		prefix = ''
		filenames = ' '.join(sources)
	return run (prefix + 'xgettext ' +
			'--add-comments ' +
			'--from-code UTF-8 ' +
			"--package-name '" + game.replace("'", r"\'") + "' " +
			'-L ' + programming_language + ' ' +
			('- ' if input is not None else '') +
			filenames + ' ' +
			'-o -',
			input) \
		.replace(b'\n"Content-Type: text/plain; charset=CHARSET\\n"\n', b'\n"Content-Type: text/plain; charset=UTF-8\\n"\n') \
		.replace(b'\n"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n"\n', b'\n"PO-Revision-Date: ' + date + b'\\n"\n')

# Prepare a temporary file named settings.txt so the path in the po file is correct.
tmpdir = fhs.write_temp(dir = True)
tmpsettingsfile = os.path.join(tmpdir, 'settings.txt')

# Find all games.
games = fhs.read_data('webgames', dir = True, multiple = True)
log('Found possible games locations: ' + '; '.join(games))

for gamesdir in games:
	# Create html directory, if it does not exist yet.
	htmldir = os.path.join(gamesdir, 'html')
	if not os.path.isdir(htmldir):
		try:
			os.mkdir(htmldir)
		except PermissionError:
			log('insufficient permissions to update ' + gamesdir + '; skipping')
			continue

	# Create link to htmldir from ../html/games
	targetdir = os.path.join(os.path.dirname(gamesdir), 'html')
	if not os.path.exists(targetdir):
		try:
			os.mkdir(targetdir)
		except PermissionError:
			log('insufficient permissions to create html link for ' + gamesdir + '; skipping')
			continue
	target = os.path.join(targetdir, 'webgames')
	if not os.path.exists(target):
		try:
			os.symlink(os.path.join(os.pardir, 'webgames', 'html'), target)
		except PermissionError:
			log('insufficient permissions to update html link for ' + gamesdir + '; skipping')
			continue

	# Remove all links in htmldir; any valid links will be recreated.
	# Doing it this way makes sure that a game can be removed by removing the game directory, and the link will be cleaned automatically.
	for link in os.listdir(htmldir):
		if link.startswith('.'):
			# Never touch hidden files.
			continue
		target = os.path.join(htmldir, link)
		if os.path.islink(target):
			try:
				os.unlink(target)
			except PermissionError:
				log('insufficient permissions to remove ' + target + '; ignored')

	# Handle all game candidates in this directory.
	for game in os.listdir(gamesdir):
		# Ignore hidden files and the special 'html' directory.
		if game.startswith('.') or game == 'html':
			#log('skipping ' + game + ': hidden or special file')
			continue

		gamedir = os.path.join(gamesdir, game)
		if not os.path.isdir(gamedir):
			# Not a directory; ignore without message.
			#log('skipping ' + game + ': not a directory')
			continue

		if not os.path.isfile(os.path.join(gamedir, game + os.extsep + 'py')):
			log('skipping ' + game + ': no game file (needed: ' + game + os.extsep + 'py)')
			continue

		# Link html/ directory.
		if not os.path.isdir(os.path.join(gamedir, 'html')):
			log('skipping ' + game + ': no html directory')
			continue

		target = os.path.join(gamesdir, 'html', game)
		if not os.path.exists(target):
			log('linking html directory for ' + game + ' in ' + gamesdir)
			try:
				os.symlink(os.path.join(os.pardir, game, 'html'), target)
			except PermissionError:
				log('skipping ' + game + ': insufficient permissions')
		else:
			log('skipping ' + game + ': already exists and is not a symlink')

		# Update translations.

		# All translations are done in the browser.
		# Sources of translated strings in game files:
		# - Python files (main game file and local modules)
		# - javascript files
		# - settings.txt: name (top level for game name; others for settings names), description, option, default for strings?
		# Note: settings are stored in pot (and po) files, but they are split into their own object in webgame.

		podir = os.path.join(gamedir, 'po')
		if not os.path.isdir(podir):
			os.mkdir(podir)
		# Create pot into a variable.
		pyfiles = [os.path.join(gamedir, x) for x in os.listdir(gamedir) if x.endswith('.py') or x == 'ai']
		jsfiles = [os.path.join(gamedir, 'html', x) for x in os.listdir(os.path.join(gamedir, 'html')) if x.endswith('.js')]
		pypot = xgettext('Python', pyfiles)
		jspot = xgettext("JavaScript", jsfiles)
		settingsfile = os.path.join(gamedir, 'settings' + os.extsep + 'txt')
		if os.path.isfile(settingsfile):
			settings = open(settingsfile).read().replace('\\', '\\\\').replace('"', r'\"')
			settings = re.sub(r'^[ \t]*(name|description|option)[ \t]*:[ \t]*(.*?)[ \t]*$', r'# Setting: \1\n_("\2")', settings, flags = re.M)
			settings = re.sub(r'^([^_#\n])', r'#\1', settings, flags = re.M)
			settings = re.sub(r'^(?=\n)', r'break()', settings, flags = re.M)	# break comment block so only last part is included in pot.
			with open(tmpsettingsfile, 'w') as tmp:
				tmp.write(settings)
				tmp.flush()
				settingspot = os.path.join(tmpdir, 'settings.pot')
				with open(settingspot, 'wb') as p:
					p.write(xgettext('Python', [tmpsettingsfile], cd = True))
				jspot = run('msgcat %s - -o-' % settingspot, jspot)
		else:
			settings = None
		pot = os.path.join(gamedir, 'po', game + os.extsep + 'pot')
		with fhs.write_temp(text = False) as tmp:
			tmp.write(pypot)
			tmp.flush()
			run('msgcat - %s -o%s' % (tmp.filename, pot), jspot)

		# Run msgmerge for each translation. This updates the existing translation with the new pot.
		for f in os.listdir(os.path.join(gamedir, 'po')):
			if f.startswith('.') or not f.endswith('.po'):
				continue
			# Warn about translations which are not available in system -> this is done in webgame, because not all system translations may be foound here. (TODO: implement that in webgame.)
			run('msgmerge --quiet --lang %s -U %s %s' % (os.path.splitext(f)[0], os.path.join(gamedir, 'po', f), pot))
